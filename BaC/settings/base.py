"""
Django settings for BaC project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', '9moma3a+*2*zz(=63i3r=ihd0mvwnd8r@)cs%c^**@i^&0!-hc')
SECURE_PROXY_SSL_HEADER = (os.getenv('SECURE_PROXY_SSL_HEADER_NAME', 'HTTP_X_FORWARDED_PROTO'), 'https')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '127.0.0.1;localhost;web').split(';')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'Isolates.apps.IsolatesConfig',
    'bac_tasks.apps.BacTasksConfig',
    'el_pagination',
    'django_tables2',
    'django_filters',
     'django_extensions',
    'bootstrap4'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BaC.urls'
WSGI_APPLICATION = 'BaC.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE', 'django.db.backends.postgresql_psycopg2'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),
        'NAME': os.getenv('DATABASE_NAME', 'bac'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', 'E7470'),
        'USER': os.getenv('DATABASE_USER', 'bac'),
        'PORT': os.getenv('DATABASE_PORT', 5432),
        'TEST': {
            "NAME": os.getenv('DATABASE_TEST', 'bac_test')
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

STATIC_ROOT = os.getenv(
    'STATIC_ROOT',
    'static'
)

STATIC_URL = '/static/'
MEDIA_ROOT = '/media/'
MEDIA_URL = '/media/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CELERY_IMPORTS = (
    'bac_tasks.tasks',
)
CELERY_RESULT_BACKEND = 'django-db'

PLOT_PALETTE=[
'#334455',
'#ee88aa',
'#336699',
'#778899',
'#aaccee',
'#3399dd',
'#ddffff',
'#66ccbb',
'#11bb99',
'#bbddcc',
'#bbddcc',
'#ccbb99',
'#ee9911',
'#ffbb66',
'#998877',
'#553322',
'#ee8888',
'#ffcccc',
'#ee4444',
'#775555',
]


# PATHS

RAW_SEQUENCES_PATH = os.getenv('BAC_SEQUENCES_RAW', 'sequences/raw')
RAW_SEQUENCES_FOLDER = os.path.join(MEDIA_ROOT, RAW_SEQUENCES_PATH)
PIPELINE_RESULTS_PATH = os.getenv('BAC_PIPELINE_RESULTS', 'sequences/results')
PIPELINE_RESULTS_URI = os.path.join(MEDIA_ROOT, PIPELINE_RESULTS_PATH)

TMP = os.getenv('TMP', '/tmp/')


ASSEMBLY_PATHS = dict(
    spades_path=os.getenv('BAC_SPADES_PATH', 'spades.py'),
    velveth_path=os.getenv('BAC_VELVETH_PATH', 'velveth'),
    velvetg_path=os.getenv('BAC_VELVETG_PATH', 'velvetg'),
    qc_path=os.getenv('BAC_QC_PATH', ''),
)


ANNOTATION_PATHS = dict(
    rast_create_genome=os.getenv('BAC_RAST_CREATE_GENOME', 'rast-create-genome'),
    rast_process_genome=os.getenv('BAC_RAST_PROCESS_GENOME', 'rast-process-genome'),
    rast_export_genome=os.getenv('BAC_RAST_EXPORT_GENOME', 'rast-export-genome'),

)

VIRULENCE_FINDER_PATHS = dict(
    virulence_finder=os.getenv('VIRULENCE_FINDER_PATH', '/opt/virulencefinder/virulencefinder.py'),
    db_path=os.getenv('VIRULENCE_FINDER_DB_PATH', '/databases/virulencefinder_db/')
)


RGI_PATHS = dict(
    rgi_path=os.getenv('BAC_RGI_PATH', 'rgi'),
    db_path=os.getenv('BAC_DB_PATH', MEDIA_ROOT),
)


REFSEQ_MASHER_PATHS = dict(
    refseq_masher_path=os.getenv('REFSEQ_MASHER_PATH', 'refseq_masher')
)

BWA = os.getenv('BAC_BWA', '/usr/bin/bwa')
FASTQC = os.getenv('BAC_FASTQC', '/usr/bin/fastqc')


# SYSTEM_SPECS

ASSEMBLY_THREADS = os.getenv('ASSEMBLY_THREADS', '2')
