# Generated by Django 2.0.5 on 2018-06-24 17:51

import Isolates.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AntibioticTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AMX', models.BooleanField(default=False, verbose_name='Amoxicillin(AMX)')),
                ('AMC', models.BooleanField(default=False, verbose_name='Amoxicillin with clavulanic acid(AMC)')),
                ('OX', models.BooleanField(default=False, verbose_name='Oxacillin(OX)')),
                ('TIC', models.BooleanField(default=False, verbose_name='Ticarcillin(TIC)')),
                ('TCC', models.BooleanField(default=False, verbose_name='Ticarcillin-clavulanic acid(TCC)')),
                ('PIP', models.BooleanField(default=False, verbose_name='Piperacillin(PIP)')),
                ('TZP', models.BooleanField(default=False, verbose_name='Piperacillin-tazobactam (TZP)')),
                ('ATM', models.BooleanField(default=False, verbose_name='Aztreonam(ATM)')),
                ('CF', models.BooleanField(default=False, verbose_name='Cefalotin(CF)')),
                ('CXM', models.BooleanField(default=False, verbose_name='Cefuroxime(CXM)')),
                ('FOX', models.BooleanField(default=False, verbose_name='Cefoxitin(FOX)')),
                ('CTX', models.BooleanField(default=False, verbose_name='Cefotaxime(CTX)')),
                ('CAZ', models.BooleanField(default=False, verbose_name='Ceftazidime(CAZ)')),
                ('CRO', models.BooleanField(default=False, verbose_name='Ceftriaxone(CRO)')),
                ('FEP', models.BooleanField(default=False, verbose_name='Cefepime(FEP)')),
                ('K', models.BooleanField(default=False, verbose_name='Kanamycin(K)')),
                ('GM', models.BooleanField(default=False, verbose_name='Gentamicin(GM)')),
                ('TOB', models.BooleanField(default=False, verbose_name='Tobramycin(TOB)')),
                ('NET', models.BooleanField(default=False, verbose_name='Netilmicin(NET)')),
                ('AN', models.BooleanField(default=False, verbose_name='Amikacin(AN)')),
                ('FOS', models.BooleanField(default=False, verbose_name='Fosfomycin(FOS)')),
                ('RA', models.BooleanField(default=False, verbose_name='Rifampin(RA)')),
                ('C', models.BooleanField(default=False, verbose_name='Chloramphenicol(C)')),
                ('NA', models.BooleanField(default=False, verbose_name='Nalidixic acid(NA)')),
                ('NOR', models.BooleanField(default=False, verbose_name='Norfloxacin(NOR)')),
                ('PEF', models.BooleanField(default=False, verbose_name='Plefloxacin(PEF)')),
                ('OFX', models.BooleanField(default=False, verbose_name='Ofloxacin(OFX)')),
                ('CIP', models.BooleanField(default=False, verbose_name='Ciprofloxacin(CIP)')),
                ('LEV', models.BooleanField(default=False, verbose_name='Levofloxacin(LEV)')),
                ('L', models.BooleanField(default=False, verbose_name='Lincomycin(L)')),
                ('E', models.BooleanField(default=False, verbose_name='Erythromycin(E)')),
                ('CC', models.BooleanField(default=False, verbose_name='Clindamycin(CC)')),
                ('SP', models.BooleanField(default=False, verbose_name='Spiramycin(SP)')),
                ('PR', models.BooleanField(default=False, verbose_name='Pristinamycin(PR)')),
                ('VA', models.BooleanField(default=False, verbose_name='Vancomycin(VA)')),
                ('TEC', models.BooleanField(default=False, verbose_name='Teicoplanin(TEC)')),
                ('SXT', models.BooleanField(default=False, verbose_name='Sulfamethoxazole with trimethoprim(SXT)')),
                ('SSS', models.BooleanField(default=False, verbose_name='Triple sulfa(SSS)')),
                ('TMP', models.BooleanField(default=False, verbose_name='Trimethoprim(TMP)')),
                ('TE', models.BooleanField(default=False, verbose_name='Tetracycline(TE)')),
                ('CS', models.BooleanField(default=False, verbose_name='Colistin(CS)')),
                ('FA', models.BooleanField(default=False, verbose_name='Fusidic acid(FA)')),
                ('LNZ', models.BooleanField(default=False, verbose_name='Linezolid(LNZ)')),
                ('MNO', models.BooleanField(default=False, verbose_name='Minocycline(MNO)')),
                ('FT', models.BooleanField(default=False, verbose_name='Nitrofurantoin(FT)')),
                ('TEL', models.BooleanField(default=False, verbose_name='Telithromycin(TEL)')),
                ('IPM', models.BooleanField(default=False, verbose_name='Imipenem(IPM)')),
            ],
        ),
        migrations.CreateModel(
            name='AroCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_aro_accession', models.CharField(editable=False, max_length=250, unique=True)),
                ('category_aro_cvterm_id', models.CharField(editable=False, max_length=250)),
                ('category_aro_name', models.CharField(editable=False, max_length=250)),
                ('category_aro_description', models.CharField(editable=False, max_length=2500)),
                ('category_aro_class_name', models.CharField(choices=[('AMR Gene Family', 'AMR Gene Family'), ('Resistance Mechanism', 'Resistance Mechanism'), ('Efflux Regulator', 'Efflux Regulator'), ('Antibiotic', 'Antibiotic'), ('Adjuvant', 'Adjuvant'), ('Efflux Component', 'Efflux Component'), ('Drug Class', 'Drug Class')], editable=False, max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='AroGene',
            fields=[
                ('model_id', models.CharField(editable=False, max_length=250, primary_key=True, serialize=False, unique=True)),
                ('model_name', models.CharField(editable=False, max_length=250)),
                ('model_type', models.CharField(editable=False, max_length=250)),
                ('model_type_id', models.CharField(editable=False, max_length=250)),
                ('model_description', models.CharField(editable=False, max_length=2500)),
                ('aro_accession', models.CharField(editable=False, max_length=250)),
                ('aro_id', models.CharField(editable=False, max_length=250)),
                ('aro_name', models.CharField(editable=False, max_length=2500)),
                ('aro_description', models.CharField(editable=False, max_length=2500)),
                ('aro_category', models.ManyToManyField(editable=False, related_name='aro_gene', to='Isolates.AroCategory')),
            ],
        ),
        migrations.CreateModel(
            name='AroGeneMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=2555)),
                ('contig', models.CharField(max_length=255)),
                ('type_match', models.CharField(choices=[('Loose', 'Loose'), ('Perfect', 'Perfect'), ('Strict', 'Strict')], editable=False, max_length=10)),
                ('orf_strand', models.CharField(editable=False, max_length=1)),
                ('orf_start', models.IntegerField(editable=False)),
                ('orf_end', models.IntegerField(editable=False)),
                ('orf_from', models.CharField(editable=False, max_length=2500)),
                ('pass_evalue', models.CharField(editable=False, max_length=255)),
                ('pass_bitscore', models.CharField(editable=False, max_length=255)),
                ('evalue', models.FloatField(editable=False)),
                ('max_identities', models.IntegerField(editable=False)),
                ('bit_score', models.FloatField(editable=False)),
                ('cvterm_id', models.CharField(editable=False, max_length=255)),
                ('query', models.CharField(editable=False, max_length=5000)),
                ('match', models.CharField(editable=False, max_length=5000)),
                ('sequence_from_db', models.CharField(editable=False, max_length=5000)),
                ('sequence_from_broadstreet', models.CharField(editable=False, max_length=5000)),
                ('dna_sequence_from_broadstreet', models.CharField(editable=False, max_length=5000)),
                ('query_start', models.IntegerField(editable=False)),
                ('query_end', models.IntegerField(editable=False)),
                ('orf_dna_sequence', models.CharField(editable=False, max_length=5000)),
                ('orf_prot_sequence', models.CharField(editable=False, max_length=5000)),
                ('perc_identity', models.FloatField(editable=False)),
                ('aro_gene', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='result', to='Isolates.AroGene')),
            ],
        ),
        migrations.CreateModel(
            name='BacteriaOntologyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='HumanOntologyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Isolate',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('collection_date', models.DateField()),
                ('culture_type', models.CharField(max_length=255)),
                ('tissue_origin', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='OntologyTerm',
            fields=[
                ('ontology', models.CharField(max_length=255)),
                ('term_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=2555)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('collection_date', models.DateField()),
                ('assembly', models.CharField(max_length=2555, null=True)),
                ('rast_folder', models.CharField(max_length=2555, null=True)),
                ('rgi_results', models.CharField(max_length=2555, null=True)),
                ('isolate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', related_query_name='sample', to='Isolates.Isolate')),
            ],
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('identifier', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('sequence_date', models.DateField()),
                ('sequence_file_pair1', models.FileField(null=True, upload_to=Isolates.models.sequence_directory_path, validators=[Isolates.models.fq_validate_file_extension])),
                ('sequence_file_pair2', models.FileField(null=True, upload_to=Isolates.models.sequence_directory_path, validators=[Isolates.models.fq_validate_file_extension])),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Isolates.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('genus', models.CharField(max_length=255)),
                ('family', models.CharField(max_length=255)),
                ('order', models.CharField(max_length=255)),
                ('klass', models.CharField(max_length=255)),
                ('phylum', models.CharField(max_length=255)),
                ('kingdom', models.CharField(max_length=255)),
                ('sequence_file', models.FileField(upload_to=Isolates.models.sample_sequence_directory_path)),
            ],
        ),
        migrations.AddField(
            model_name='result',
            name='sample',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='Isolates.Sample'),
        ),
        migrations.AddField(
            model_name='result',
            name='sequences',
            field=models.ManyToManyField(editable=False, to='Isolates.Sequence'),
        ),
        migrations.AddField(
            model_name='isolate',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Isolates.Patient'),
        ),
        migrations.AddField(
            model_name='isolate',
            name='resistance',
            field=models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resistances', to='Isolates.AntibioticTest'),
        ),
        migrations.AddField(
            model_name='isolate',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species', to='Isolates.Species'),
        ),
        migrations.AddField(
            model_name='isolate',
            name='susceptibility',
            field=models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='susceptibilies', to='Isolates.AntibioticTest'),
        ),
        migrations.AddField(
            model_name='humanontologyterm',
            name='ontology_term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Isolates.OntologyTerm'),
        ),
        migrations.AddField(
            model_name='humanontologyterm',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phenotype', to='Isolates.Patient'),
        ),
        migrations.AddField(
            model_name='bacteriaontologyterm',
            name='isolate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Isolates.Isolate'),
        ),
        migrations.AddField(
            model_name='bacteriaontologyterm',
            name='ontology_term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Isolates.OntologyTerm'),
        ),
        migrations.AddField(
            model_name='arogenematch',
            name='result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='result', related_query_name='genes', to='Isolates.Result'),
        ),
    ]
